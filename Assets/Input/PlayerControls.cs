//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""InPlay"",
            ""id"": ""e95e9545-4a2d-43a8-9887-3a8d5d4ab04b"",
            ""actions"": [
                {
                    ""name"": ""Directional"",
                    ""type"": ""Button"",
                    ""id"": ""f1a455ec-83d3-4186-bec0-396037454f31"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""bc651eb7-4098-40bb-b29d-ad23c550e6ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Boost"",
                    ""type"": ""Button"",
                    ""id"": ""bcf7bd6e-4d80-4f36-9bfc-7c458ea8946e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dodge"",
                    ""type"": ""Button"",
                    ""id"": ""5b95d223-51a6-4b01-81d1-b7a10c5519e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""51e40b31-f1d0-4e3a-a686-dde12c7fbd0f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Duck"",
                    ""type"": ""Button"",
                    ""id"": ""6b60ef54-4d92-4a0d-97b3-4abcf890ca3b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""6e518f96-d96e-4112-ace9-8c436ddc118e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e2d42517-7a80-46d9-b973-d8810ee1591d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControls"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""0a996f8c-50e3-4736-a25e-cd3d31f0b2b0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Directional"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c70941d8-ccf5-40e5-8ced-f5475af732d6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControls"",
                    ""action"": ""Directional"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""57857bc9-6260-492d-9d82-28115bf43cb4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControls"",
                    ""action"": ""Directional"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""6135d3fe-335d-45de-ae6a-368b56982df5"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Directional"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""516280d5-4347-452b-8d37-d985a1e80911"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Directional"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e7f104a4-a88e-4b7f-9786-6c508c12914e"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Directional"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7ce10f32-8357-4803-8923-ac46095756f8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControls"",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""395fac0f-4dbf-47b4-8389-177dec7e6066"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControls"",
                    ""action"": ""Dodge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72a2d447-7934-4eea-a4d0-fc23b65f155a"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControls"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e2372c17-c007-4c91-8151-dcd74808b992"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PlayerControls"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7364fde-28f2-4346-aeea-e07ad174e617"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Duck"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e3fc9cd-f80c-4763-ae88-22d96e4dbee5"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PlayerControls"",
            ""bindingGroup"": ""PlayerControls"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // InPlay
        m_InPlay = asset.FindActionMap("InPlay", throwIfNotFound: true);
        m_InPlay_Directional = m_InPlay.FindAction("Directional", throwIfNotFound: true);
        m_InPlay_Jump = m_InPlay.FindAction("Jump", throwIfNotFound: true);
        m_InPlay_Boost = m_InPlay.FindAction("Boost", throwIfNotFound: true);
        m_InPlay_Dodge = m_InPlay.FindAction("Dodge", throwIfNotFound: true);
        m_InPlay_Attack = m_InPlay.FindAction("Attack", throwIfNotFound: true);
        m_InPlay_Duck = m_InPlay.FindAction("Duck", throwIfNotFound: true);
        m_InPlay_Escape = m_InPlay.FindAction("Escape", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InPlay
    private readonly InputActionMap m_InPlay;
    private IInPlayActions m_InPlayActionsCallbackInterface;
    private readonly InputAction m_InPlay_Directional;
    private readonly InputAction m_InPlay_Jump;
    private readonly InputAction m_InPlay_Boost;
    private readonly InputAction m_InPlay_Dodge;
    private readonly InputAction m_InPlay_Attack;
    private readonly InputAction m_InPlay_Duck;
    private readonly InputAction m_InPlay_Escape;
    public struct InPlayActions
    {
        private @PlayerControls m_Wrapper;
        public InPlayActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Directional => m_Wrapper.m_InPlay_Directional;
        public InputAction @Jump => m_Wrapper.m_InPlay_Jump;
        public InputAction @Boost => m_Wrapper.m_InPlay_Boost;
        public InputAction @Dodge => m_Wrapper.m_InPlay_Dodge;
        public InputAction @Attack => m_Wrapper.m_InPlay_Attack;
        public InputAction @Duck => m_Wrapper.m_InPlay_Duck;
        public InputAction @Escape => m_Wrapper.m_InPlay_Escape;
        public InputActionMap Get() { return m_Wrapper.m_InPlay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InPlayActions set) { return set.Get(); }
        public void SetCallbacks(IInPlayActions instance)
        {
            if (m_Wrapper.m_InPlayActionsCallbackInterface != null)
            {
                @Directional.started -= m_Wrapper.m_InPlayActionsCallbackInterface.OnDirectional;
                @Directional.performed -= m_Wrapper.m_InPlayActionsCallbackInterface.OnDirectional;
                @Directional.canceled -= m_Wrapper.m_InPlayActionsCallbackInterface.OnDirectional;
                @Jump.started -= m_Wrapper.m_InPlayActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_InPlayActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_InPlayActionsCallbackInterface.OnJump;
                @Boost.started -= m_Wrapper.m_InPlayActionsCallbackInterface.OnBoost;
                @Boost.performed -= m_Wrapper.m_InPlayActionsCallbackInterface.OnBoost;
                @Boost.canceled -= m_Wrapper.m_InPlayActionsCallbackInterface.OnBoost;
                @Dodge.started -= m_Wrapper.m_InPlayActionsCallbackInterface.OnDodge;
                @Dodge.performed -= m_Wrapper.m_InPlayActionsCallbackInterface.OnDodge;
                @Dodge.canceled -= m_Wrapper.m_InPlayActionsCallbackInterface.OnDodge;
                @Attack.started -= m_Wrapper.m_InPlayActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_InPlayActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_InPlayActionsCallbackInterface.OnAttack;
                @Duck.started -= m_Wrapper.m_InPlayActionsCallbackInterface.OnDuck;
                @Duck.performed -= m_Wrapper.m_InPlayActionsCallbackInterface.OnDuck;
                @Duck.canceled -= m_Wrapper.m_InPlayActionsCallbackInterface.OnDuck;
                @Escape.started -= m_Wrapper.m_InPlayActionsCallbackInterface.OnEscape;
                @Escape.performed -= m_Wrapper.m_InPlayActionsCallbackInterface.OnEscape;
                @Escape.canceled -= m_Wrapper.m_InPlayActionsCallbackInterface.OnEscape;
            }
            m_Wrapper.m_InPlayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Directional.started += instance.OnDirectional;
                @Directional.performed += instance.OnDirectional;
                @Directional.canceled += instance.OnDirectional;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Boost.started += instance.OnBoost;
                @Boost.performed += instance.OnBoost;
                @Boost.canceled += instance.OnBoost;
                @Dodge.started += instance.OnDodge;
                @Dodge.performed += instance.OnDodge;
                @Dodge.canceled += instance.OnDodge;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Duck.started += instance.OnDuck;
                @Duck.performed += instance.OnDuck;
                @Duck.canceled += instance.OnDuck;
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
            }
        }
    }
    public InPlayActions @InPlay => new InPlayActions(this);
    private int m_PlayerControlsSchemeIndex = -1;
    public InputControlScheme PlayerControlsScheme
    {
        get
        {
            if (m_PlayerControlsSchemeIndex == -1) m_PlayerControlsSchemeIndex = asset.FindControlSchemeIndex("PlayerControls");
            return asset.controlSchemes[m_PlayerControlsSchemeIndex];
        }
    }
    public interface IInPlayActions
    {
        void OnDirectional(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnBoost(InputAction.CallbackContext context);
        void OnDodge(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnDuck(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
    }
}
